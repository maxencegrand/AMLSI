(define (domain spanner)
(:requirements :strips :typing :negative-preconditions :hierarchy :method-preconditions)
(:types
location T1 - object
nut spanner man - T1
)
(:predicates
	(at ?x1 - T1 ?x2 - location)
	(carrying ?x1 - man ?x2 - spanner)
	(useable ?x1 - spanner)
	(loose ?x1 - nut)
	(tightened ?x1 - nut)
	(link ?x1 - location ?x2 - location)
)
(:task goto
	:parameters (?x1 - location ?x2 - man ))

(:task do-pickup_spanner
	:parameters (?x1 - spanner ?x2 - man ))

(:task do-tighten_nut
	:parameters (?x1 - nut ))

(:method m-goto-0
	:parameters (?l - location ?m - man )
	:task (goto ?l ?m)
	:precondition (and
	(at ?m ?l))
	:ordered-subtasks (and
	)
)
(:method m-goto-1
	:parameters (?l1 - location ?l2 - location ?m - man )
	:task (goto ?l1 ?m)
	:precondition (and
	(at ?m ?l2)
	(link ?l2 ?l1)
	(not(at ?m ?l1)))
	:ordered-subtasks (and
		(walk ?l2 ?l1 ?m)
	)
)
(:method m-goto-2
	:parameters (?l1 - location ?l2 - location ?m - man )
	:task (goto ?l1 ?m)
	:precondition (and
	(not(at ?m ?l2))
	(link ?l2 ?l1)
	(not(at ?m ?l1)))
	:ordered-subtasks (and
		(goto ?l2 ?m)
		(walk ?l2 ?l1 ?m)
	)
)
(:method m-do-pickup_spanner-0
	:parameters (?s - spanner ?m - man )
	:task (do-pickup_spanner ?s ?m)
	:precondition (and)
	:ordered-subtasks (and
	)
)
(:method m-do-pickup_spanner-1
	:parameters (?l - location ?s - spanner ?m - man )
	:task (do-pickup_spanner ?s ?m)
	:precondition (and
	(not(carrying ?m ?s))
	(at ?s ?l))
	:ordered-subtasks (and
		(goto ?l ?m)
		(pickup_spanner ?l ?s ?m)
	)
)
(:method m-tighten_nut-0
	:parameters (?n - nut )
	:task (do-tighten_nut ?n)
	:precondition (and
	(tightened ?n))
	:ordered-subtasks (and
	)
)
(:method m-tighten_nut-1
	:parameters (?l - location ?n - nut ?m - man ?s - spanner )
	:task (do-tighten_nut ?n)
	:precondition (and
	(at ?n ?l)
	(loose ?n)
	(useable ?s))
	:ordered-subtasks (and
		(do-pickup_spanner ?s ?m)
		(goto ?l ?m)
		(tighten_nut ?l ?s ?m ?n)
	)
)
(:action walk
	:parameters (?x1 - location ?x2 - location ?x3 - man )
	:precondition (and
	(at ?x3 ?x1)
	(link ?x1 ?x2)
	(not(at ?x3 ?x2)))
	:effect (and
	(not(at ?x3 ?x1))
	(at ?x3 ?x2))
)
(:action pickup_spanner
	:parameters (?x1 - location ?x2 - spanner ?x3 - man )
	:precondition (and
	(at ?x3 ?x1)
	(at ?x2 ?x1)
	(not(carrying ?x3 ?x2))
	(useable ?x2))
	:effect (and
	(not(at ?x2 ?x1))
	(carrying ?x3 ?x2))
)
(:action tighten_nut
	:parameters (?x1 - location ?x2 - spanner ?x3 - man ?x4 - nut )
	:precondition (and
	(at ?x3 ?x1)
	(carrying ?x3 ?x2)
	(loose ?x4)
	(at ?x4 ?x1)
	(useable ?x2)
	(not(tightened ?x4)))
	:effect (and
	(not(loose ?x4))
	(not(useable ?x2))
	(tightened ?x4))
)
)
